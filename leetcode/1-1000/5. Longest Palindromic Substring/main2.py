class Solution:
    def longestPalindrome(self, s: str) -> str:
        # dynamic programming
        # tabulation
        # time complexity: O(n)
        # space complexity: O(n^2)
        # TLE: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        
        res = s[0]
        
        dp = [[False for _ in range(len(s))] for _ in range(len(s))]
        
        for i in range(len(s)):
            dp[i][i] = True
        
        for i in range(len(s)-1):
            dp[i][i+1] = s[i] == s[i+1]
            
            if dp[i][i+1]:
                res = s[i:i+2]
        
        for length in range(3, len(s)+1):
            for i in range(len(s)-length+1):
                dp[i][i+length-1] = dp[i+1][i+length-2] and s[i] == s[i+length-1]
                
                if dp[i][i+length-1]:
                    res = s[i:i+length]
        return res