from typing import List
from datetime import datetime

# DEFINE SOLUTION IN HERE
class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        # s[0][n-1] sum of the whole array
        # s[0][n-1] = max(s[0][i] + s[i+1][n-1] for i in range(1, min(k, right-left+1))
        # General: s[left][right] = max(s[left][left+i] + s[left+i+1][right] for i in range(1, 1+min(k, right-left)))
        #   where i is the size of the 1st partition (i < right-left+1 and i < k)
        
        # -> 2 cases: have at least 2 partitions, and merge.
        # merge only happen when right - left + 1 <= k.

        def print_s(s):
            for i in range(len(s)):
                for j in range(len(s[0])):
                    print(s[i][j], ' ', end='')
                print()
        
        n = len(arr)
        s = [[-1 for i in range(n)] for j in range(n)]
        
        for i in range(n):
            s[i][i] = arr[i]
        
        print_s(s)
        
        def find_s(arr, s, left, right):
            if s[left][right] == -1:
                m, mv = 0, 0 # max value of a single cell
                for i in range(1, 1+min(k, right-left)): # i: size of the 1st partition
                    a = find_s(arr, s, left, left+i-1)
                    b = find_s(arr, s, left+i, right)
                    
                    mv = max(mv, int(max(a / i, b / (right-left-i+1))))
                    
                    m = max(a + b, m)
                
                if right - left + 1 <= k: # can merge
                    m = max(m, mv * (right-left+1))
                
                s[left][right] = m
            return s[left][right]
        
        return find_s(arr, s, 0, n-1)


if __name__ == '__main__':
    solution = Solution()

    # DEFINE PARAMETERS IN HERE

    start = datetime.now()
    # RUN MAIN FUNCTION IN HERE
    arr = [1,15,7,9,2,5,10]
    k = 3

    arr = [715301,25506,490661,157164,811431,252695,106886,591990,784150,886408,18182,41602,68573,325381,73935,950852,290720,939587,897877,277649,255105,733143,465301,758590,76918,189262,691204,914044,163488,179242,514233,158957,861771,829261,885936,23616,959166,292892,71841,8521,84194,521675,917985,321409,609,267560,202866,522747,115680,262205,957981,945246,851531,564445,809001,251004,824427,771618,365334,946236,126467,204637,113795,486317,344662,757654,205941,363764,721837,975975,932531,106155,655037,580373,163541,955467,546052,708129,176695,65870,101241,876814,358508,498084,394295,808209,483255,999499,253236,400168,172509,776100,731866,877071,885013,246004,699345,978112,512913,489656,961812,306254,816865,244584,907713,443235,44062,684279,493579,388063,398448,790694,807597,962839,744189,241602,195842,722313,134268,891009,947457,921436,866016,226451,604299,648750,225284,750725,350200,198522,230834,473457,467194,241227,713446,825765,448118,823681,731363,767357,455624,307815,361011,520734,65584,894274,202338,468300,752399,482382,215291,598937,911700,219051,27251,880642,576409,667272,783767,894052,988406,632934,28257,58127,554486,428852,402741,678114,373639,105396,574032,275825,372184,621967,848685,472513,754438,942404,276243,37838,628315,502215,422382,1580,453088,354343,309295,316443,395374,174355,791780,816548,327525,546883,836693,827871,38812,569370,649185,640709,375940,570874,389842,960618,459212,18317,244081,157503,660024,737004,507182,51871,398189,62602,5693,510647,569367,52948,30822,287234,560222,595430,748482,470528,663326,389139,330498,48740,982645,723276,731283,328908,13196,228799,680005,313197,171428,516544,341961,125284,335858,156123,997588,297277,535194,249356,284863,269800,73814,682294,119381,732886,378659,397097,663063,111534,808563,684328,40600,476653,666824,994367,720880,32609,870827,918483,735333,131324,34891,909366,89706,472968,691378,134094,960341,266515,693319,18049,459199,442429,920154,873039,849360,119963,546383,218746,34487,869831,188083,725459,530456,927439,581973,6649,88640,543428,541417,768450,424971,522978,931865,329981,601382,846060,938502,742610,400303,560366,153989,16651,435532,836685,341367,706823,305073,169338,63463]
    k = 292

    ans = solution.maxSumAfterPartitioning(arr, k)

    end = datetime.now()

    print(ans)
    print('\nRuntime:', (end-start))